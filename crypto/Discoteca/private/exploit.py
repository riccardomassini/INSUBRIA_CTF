#!/usr/bin/env python3

with open("frequencies.txt", "r") as f:
    frequency = {}
    for line in f:
        k, v = line.strip().split(':')
        key = bytes.fromhex(k).decode('utf-8')
        frequency[key] = float(v)
    f.close()

with open("ciphertext.txt", "r") as f:
    secret = f.read()
    f.close()

def analyze(text) -> dict:
    freq:dict = {}
    # Count the frequency of each character
    for c in text:
        if c in freq:
            freq[c] += 1.0
        else:
            freq[c] = 1.0
    # Normalize the frequency
    for c in freq:
        freq[c] *= 100/len(text)
    return freq

def get_closest_char(freq:float) -> str:
    closest:str = None
    diff:float = 100.0
    for c in frequency:
        if abs(frequency[c] - freq) < diff:
            #print(frequency[c], freq)
            diff = abs(frequency[c] - freq)
            closest = c
    #print(freq, closest)
    return closest

def get_key(char:str, val:float) -> str:
    key = abs(ord(char) - ord(get_closest_char(val)))
    return key


def decrypt_mono(cipher:str, freq:dict) -> str:
    plain:str = ""
    for c in cipher:
        plain += get_closest_char(freq[c])
    return plain

def decrypt(text:str) -> str:
    freq:dict = analyze(text)
    return decrypt_mono(text, freq)

def find_flag(text:str) -> str:
    keyword:str = "flag{"
    try:
        flag:str = text.split(keyword)[1].split('}')[0]
    except:
        flag:str = "not found"
    return flag

def main():
    #print(frequency)
    #print(secret)
    text = decrypt(secret)
    #print(text)
    flag = "flag{" + find_flag(text) +'}'
    print(flag)
    #with open("flag.txt", "w") as f:
    #    f.write(flag)
    #    f.close()

if __name__ == "__main__":
    main()