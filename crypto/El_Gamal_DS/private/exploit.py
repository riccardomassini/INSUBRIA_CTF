from pwn import *
from hashlib import sha256
from Crypto.Util.number import bytes_to_long, long_to_bytes
import re

def mac(key: bytes, msg: bytes) -> int:
    return bytes_to_long(sha256(key + msg).digest())

# --- SETUP ---
HOST = "localhost"
PORT = 5001

p = remote(HOST, PORT)
# context.log_level = 'debug'

# --- KNOWN MESSAGE ---
p.recvuntil(b'MAC: ')
msg1 = b'u never get the flag'
mac_dig1 = int(p.recvline(False).strip().decode())

print(f'[+] {msg1 = }')
print(f'[+] {mac_dig1 = }')

# --- KEY CHECK (for dev/debug only) ---
key = b'\x11A\xd4\x85\x06\x11\xd0\xebp\xd2\x1a\xc9J\xb7\xdf\xaf'
assert mac(key, msg1) == mac_dig1

# --- TARGET (From hash_extender) ---
target_mac_hex = 'bd57d11818361bffafd96a78e2b3f4968289e22e1bc686345e0acf5adbfe7ad9'
target_msg_hex = ('75206e65766572206765742074686520666c61678000000000000000000000000000000000000000000000000000012067697665206d652074686520666c6167')

target_mac = bytes_to_long(bytes.fromhex(target_mac_hex))
target_msg = bytes.fromhex(target_msg_hex)
assert mac(key, target_msg) == target_mac

# --- FIRST SIGNATURE ---
p.recvuntil(b'Signature: ')
sign_line = p.recvline(False).strip(b"()").decode()
parts = dict(part.split("=") for part in sign_line.split(", "))
r1, s1 = int(parts["r"]), int(parts["s"])

p.recvuntil(b'p=')
prime_p = int(p.recvline(False).strip().decode())
print(f'[+] {prime_p = }')

# --- SECOND MESSAGE (FOR ATTACK) ---
p.recvuntil(b'> ')
p.sendline(b'1')
p.recvuntil(b'(hex): ')

msg2_hex = '692077696C6C20676F742074686520666C6167'
msg2 = bytes.fromhex(msg2_hex)
p.sendline(msg2_hex.encode())

p.recvuntil(b'MAC: ')
mac_dig2 = int(p.recvline(False).strip().decode())

p.recvuntil(b'Signature: ')
sign_line = p.recvline(False).strip(b"()").decode()
parts = dict(part.split("=") for part in sign_line.split(", "))
r2, s2 = int(parts["r"]), int(parts["s"])

# --- CHECKS ---
assert r1 == r2  # Nonce reuse!

# --- ATTACK PHASE ---
delta_mac = (mac_dig1 - mac_dig2) % (prime_p - 1)
inv_delta_mac = pow(delta_mac, -1, prime_p - 1)
inv_k = ((s1 - s2) * inv_delta_mac) % (prime_p - 1)
k = pow(inv_k, -1, prime_p - 1)

inv_r = pow(r1, -1, prime_p - 1)
neg_x = ((s1 * k - mac_dig1) * inv_r) % (prime_p - 1)
x = (-neg_x) % (prime_p - 1)

target_s = (inv_k * (target_mac - x * r1)) % (prime_p - 1)
print(f'[+] {target_s = }')

# --- SUBMIT FORGED SIGNATURE ---
p.recvuntil(b'> ')
p.sendline(b'2')
p.recvuntil(b'(hex): ')
p.sendline(target_msg_hex.encode())
p.recvuntil(b'r: ')
p.sendline(str(r1).encode())
p.recvuntil(b's: ')
p.sendline(str(target_s).encode())

# --- GET FLAG ---
print('[+] Getting flag')
output = p.recvall(timeout=1).decode()

match = re.search(r'flag\{.*?\}', output)
print('[FLAG]', match.group(0))

